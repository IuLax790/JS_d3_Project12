(function (React$1, ReactDOM, d3$1) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  //import { group } from 'd3-array';

  //const csvUrl =
  //  'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/d1ed7ef35690594a918ed5fe1ffb6a75266d2c1f/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv';

  const csvUrl =
    'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv';

  const parseDay = d3$1.timeParse('%m/%d/%y');

  const transform = rawData => {
    // Filter out rows that represent provinces or states.
    const countriesData = rawData.filter(d => !d['Province/State']);

    // Get timeseries data for each country.
    const days = rawData.columns.slice(4);
    return countriesData.map(d => {
      const countryName = d['Country/Region'];

      const countryTimeseries = days.map(day => ({
        date: parseDay(day),
        deathTotal: +d[day],
        countryName
      }));

      countryTimeseries.countryName = countryName;
      return countryTimeseries;
    });
  };

  const useData = () => {
    const [data, setData] = React$1.useState();

    React$1.useEffect(() => {
      d3$1.csv(csvUrl).then(rawData => {
        setData(transform(rawData));
      });
    }, []);

    return data;
  };

  const XAxis = ({ xScale, innerHeight }) => {
    const ref = React$1.useRef();
    React$1.useEffect(() => {
      const xAxisG = d3$1.select(ref.current);
      const xAxis = d3$1.axisBottom(xScale)
        .tickSize(-innerHeight)
        .tickPadding(18);
      xAxisG.call(xAxis);
    }, []);
    return React.createElement( 'g', { transform: `translate(0,${innerHeight})`, ref: ref });
  };

  const YAxis = ({ yScale, innerWidth }) => {
    const ref = React$1.useRef();
    React$1.useEffect(() => {
      const yAxisG = d3$1.select(ref.current);
      const yAxis = d3$1.axisLeft(yScale)
        .tickSize(-innerWidth)
        .tickPadding(3)
        .ticks(10, "~s");
        //.tickFormat((tickValue) => tickValue);
      yAxisG.call(yAxis);
    }, []);
    return React.createElement( 'g', { ref: ref });
  };

  const VoronoiOverlay = ({
    innerWidth,
    innerHeight,
    allData,
    lineGenerator,
    onHover
  }) => {

    return React$1.useMemo(() => {
      console.log('memoizing');
      const points = allData.map(d => [
        lineGenerator.x()(d),
        lineGenerator.y()(d)
      ]);
      const delaunay = d3.Delaunay.from(points);
      const voronoi = delaunay.voronoi([0, 0, innerWidth, innerHeight]);
      return (
        React.createElement( 'g', { className: "voronoi" },
          points.map((point, i) => (
            React.createElement( 'path', {
              onMouseEnter: () => onHover(allData[i]), fill: "none", stroke: "pink", d: voronoi.renderCell(i) })
          ))
        )
      );
    }, [allData, lineGenerator, innerWidth, innerHeight, onHover]);
  };

  const xValue = (d) => d.date;
  const yValue = (d) => d.deathTotal;

  const margin = { top: 50, right: 40, bottom: 80, left: 100 };

  const formatDate = d3$1.timeFormat('%b %d');

  const LineChart = ({ data, width, height }) => {
    const [activeCountryName, setActiveCountryName] = React$1.useState();

    const innerWidth = width - margin.left - margin.right;
    const innerHeight = height - margin.top - margin.bottom;

    const allData = React$1.useMemo(
      () =>
        data.reduce(
          (accumulator, countryTimeseries) =>
            accumulator.concat(countryTimeseries),
          []
        ),
      [data]
    );

    const epsilon = 1;

    const xScale = React$1.useMemo(
      () => d3$1.scaleTime().domain(d3$1.extent(allData, xValue)).range([0, innerWidth]),
      [allData, xValue]
    );

    const yScale = React$1.useMemo(
      () =>
        d3$1.scaleLog()
          .domain([epsilon, d3$1.max(allData, yValue)])
          .range([innerHeight, 0]),
      [epsilon, allData, yValue]
    );

    const lineGenerator = React$1.useMemo(
      () =>
        d3$1.line()
          .x((d) => xScale(xValue(d)))
          .y((d) => yScale(epsilon + yValue(d))),
      [xScale, xValue, yScale, yValue, epsilon]
    );

    const mostRecentDate = xScale.domain()[1];

    console.log(activeCountryName);

    const handleVoronoiHover = React$1.useCallback((d) => {
      setActiveCountryName(d.countryName);
    }, []);

    return (
      React$1__default.createElement( 'svg', { width: width, height: height },
        React$1__default.createElement( 'g', { transform: `translate(${margin.left},${margin.top})` },
          React$1__default.createElement( XAxis, { xScale: xScale, innerHeight: innerHeight }),
          React$1__default.createElement( YAxis, { yScale: yScale, innerWidth: innerWidth }),
          data.map((countryTimeseries) => {
            return (
              React$1__default.createElement( 'path', {
                className: "marker-line", d: lineGenerator(countryTimeseries) })
            );
          }),

          React$1__default.createElement( 'text', { transform: `translate(${innerWidth / 2},0)`, 'text-anchor': "middle" }, "Global Coronavirus Deaths Over Time by Country"),
          React$1__default.createElement( 'text', {
            className: "axis-label", transform: `translate(-40,${innerHeight / 2}) rotate(-90)`, 'text-anchor': "middle" }, "Cumulative Deaths"),
          React$1__default.createElement( 'text', {
            className: "axis-label", 'text-anchor': "middle", 'alignment-baseline': "hanging", transform: `translate(${innerWidth / 2},${innerHeight + 40})` }, "Time"),
          React$1__default.createElement( VoronoiOverlay, {
            onHover: handleVoronoiHover, innerHeight: innerHeight, innerWidth: innerWidth, allData: allData, lineGenerator: lineGenerator }),
          activeCountryName ? (
            React$1__default.createElement( 'path', {
              className: "marker-line active", d: lineGenerator(
                data.find(
                  (countryTimeseries) =>
                    countryTimeseries.countryName === activeCountryName
                )
              ) })
          ) : null
        )
      )
    );
  };

  const width = window.innerWidth;
  const height = window.innerHeight;

  const App = () => {
    const data = useData();
    return data
      ? React$1__default.createElement( LineChart, { data: data, width: width, height: height })
      : React$1__default.createElement( 'div', null, "Loading..." );
  };

  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
